// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}



datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role{
  admin
  user
}

model User {
  id              String   @id @default(uuid())
  name            String?
  email           String     @unique
  image           String?
  hashedPassword  String?
  guestId         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  hasNotifi       Boolean?
  role            Role       @default(user)
  notifi          Notifi[]
  accounts        Account[]
  reservations    Reservation[]
  listing         Listing[]
  rating          Rating[]
  banner          Banner[]
}


model Notifi{
  id              String     @id @default(uuid())
  message         String
  guestName       String?
  guestImage      String?
  userId          String?    
  createdAt       DateTime   @default(now())
  user            User?       @relation(fields: [userId], references: [id],onDelete: Cascade)
  listingId       String?
  listing         Listing?    @relation(fields: [listingId], references: [id],onDelete: Cascade)
  reservationsId  String?
  reservation     Reservation?    @relation(fields: [reservationsId], references: [id],onDelete: Cascade)
  @@index([userId])
  @@index([listingId])
  @@index([reservationsId])
}

model Listing {
  id              String   @id @default(uuid())
  title           String   @unique
  description     String   @db.Text
  imageSrc        Image[]
  createdAt       DateTime @default(now())
  bed             Int
  roomCount       Int
  guestCount      Int
  price           Int
  discount        Int?
  imagePromo      String?
  rating          Rating[]
  notifi          Notifi[]
  reservations    Reservation[]
  fasilitas       Fasilitas[]   // Menambahkan relasi fasilitas
  userId          String?
  user            User?      @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@index([userId])
}




model Image{
  id                 String   @id @default(uuid())
  img                String  
  createdAt          DateTime @default(now())
  listingId          String
  listing            Listing  @relation(fields: [listingId],references: [id],onDelete: Cascade)

  @@index([listingId])
}

model Fasilitas{
  id              String   @id @default(uuid())
  fasilitas       String
  listingId       String
  listing         Listing   @relation(fields: [listingId],references: [id],onDelete: Cascade)

  @@index([listingId])
}

model Rating{
  id              String   @id @default(uuid())
  message         String   @db.Text
  value           Int
  guestName       String?
  guestImage      String?
  guestEmail      String?
  listingId       String?
  createdAt          DateTime @default(now())
  listing         Listing?    @relation(fields: [listingId], references: [id],onDelete: Cascade)
  userId          String?
  user            User?      @relation(fields: [userId],references: [id],onDelete: Cascade)
  reservationId   String?       
  reservation     Reservation?   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  @@index([listingId])
  @@index([userId])
  @@index([reservationId])
}


model Reservation {
  id              String   @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  rooms           Int
  status          String?
  guestName       String?
  guestImage      String?
  guestEmail      String?
  guestId         String?
  adminId         String?
  title           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String?
  user            User?       @relation(fields: [userId], references: [email],onDelete: Cascade)
  listingId       String
  listing         Listing    @relation(fields: [listingId], references: [id],onDelete: Cascade)
  notifi          Notifi[]
  rating          Rating[]
  @@index([userId])
  @@index([listingId])
}

model Account {
  id                 String   @id @default(uuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Banner{
  id                String   @id @default(uuid())
  image             String
  title             String?
  userId            String
  createdAt         DateTime   @default(now())
  user              User      @relation(fields: [userId], references: [email],onDelete: Cascade)
  @@index([userId])
}






